function [ sc_gas ] = calc_schmidt( s, t, gas )% [ sc_gas ] = calc_schmidt( s, t, gas )% computes schmidt number...%% equations come from Roberta Hamme, via Laurie Juranek:%This function calculates the diffusion coefficients of Ne, Ar, N2, O2, He,%Kr, and Xe (cm^2/s) given temp in degrees C and sal in psu N2 is%calculated from the Wise and Houghton values, all other gases are%calculated by ratio to N2 based on Wise and Houghton (but favorable%compared to other researchers as well) conversion to seawater is by%*viscosity of freshwater / viscosity of seawater, this makes about the%right magnitude correction especially at warmer temps it's unclear where I%got it from, probably from original Emerson Quick Basic program for%diffusion coefficients uncertainty of what this correction should be is%large, so as long as it's done consistently, I think it's okay%% code written by Matthew Long, 2007% modified to get all gases in one function% See also SW_VISC t_sq = t .* t; t_cu = t_sq .* t; t_fo = t_cu .* t;    if strcmp( gas, 'co2' )    % Computes the Schmidt number of various gases in seawater using the    % formulation presented by Wanninkhof (1992, J. Geophys. Res., 97,    % 7373--7382).  Input is temperature in degrees~C, output is unitless.        a = [ 2073.1; 125.62; 3.6276; 0.043219 ];    sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu;elseif strcmp( gas, 'dms' )    % Saltman et al. 1993, eq 15.  Input is temperature in degrees~C, output is unitless.        a = [ 2674.0; 147.12; 3.726; 0.038 ];    sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu;elseif strcmp( gas, 'o2')         %a = [ 1638.0; 81.83; 1.4830; 0.008004 ]; % keeling et al 1998%      a = [ 1953.4; 128.0; 3.9918; 0.050091 ]; % wanninkhof 92%      a = [1558 86.04 2.142 0.0216]; %Raymond et al. 2012%      a = [1801 120.1 3.782 0.0476]; %Raymond et al. 2012%     sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu;        %NEW: Wanninkhof (2014) 4th order polynomial    a = [1920.4; 135.6; 5.2122; 0.10939; 0.00093777];    sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu + a(5) .* t_fo;elseif strcmp(gas, 'n2o')  % from Raymond et al. 2012 Scaling the gas transfer...    %velocity and hydraulic geometry in streams and small rivers, L&): Fluids and Environments. %     a = [2105; 130.08; 3.486; 0.0365]; %     a = [2056; 137.11; 4.317; 0.0543]; %From Wanninkhof, 1992%     sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu;            %NEW: Wanninkhof (2014) 4th order polynomial    a = [2356.2; 166.38; 6.3952; 0.13422; 0.0011506];    sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu + a(5) .* t_fo;    elseif strcmp(gas, 'ch4')            a = [1824; 98.12; 2.413; 0.0241];            sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu;  else    % kinematic viscosities at t, s and 0 dbar (m^2/s), then at s = 0    zero_vec = zeros( size(t) );    visc = sw_visc( s, t, zero_vec);    visc_0sal = sw_visc( zero_vec, t, zero_vec );    tK = t + 273.15;    %Wise and Houghton exponential    diff_N2_0sal = 7.9e-2 .* exp( -4690 / 1.9872 ./ tK );    switch gas        %case 'o2'                        %a = [ 1638.0; 81.83; 1.4830; 0.008004 ]; % keeling et al 1998            % a = [ 1953.4; 128.0; 3.9918; 0.050091 ]; % wanninkhof 92            %sc_gas = a(1) - a(2) .* t + a(3) .* t_sq - a(4) .* t_cu;            %By ratio with N2 using Wise and Houghton ratio values            %diff_gas_0sal = diff_N2_0sal / 1.15;        case 'ar'            %By ratio with N2            diff_gas_0sal = diff_N2_0sal / 1.10;        case 'ne'            %By ratio with N2 using Wise and Houghton ratio values            diff_gas_0sal = diff_N2_0sal / 0.810;        case 'he'            %By ratio with N2 using Wise and Houghton ratio values            diff_gas_0sal = diff_N2_0sal / 0.418;        case 'kr'            %By ratio with N2 using Wise and Houghton ratio values            diff_gas_0sal = diff_N2_0sal / 1.40;        case 'xe'            %By ratio with N2 using Wise and Houghton ratio values            diff_gas_0sal = diff_N2_0sal / 2.5;            %This ratio is uncertain.  Wise and Houghton Xe values show some variation, best guess in comparison to JÃ¤hne.        case 'n2'            diff_gas_0sal = diff_N2_0sal .* visc_0sal ./ visc;        otherwise            error( 'calc_schmidt, specify gas.\n' );    end    diff_gas_sw = diff_gas_0sal .* visc_0sal ./ visc;    sc_gas = 10000 * visc ./ diff_gas_sw;endreturn;